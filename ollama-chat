#!/usr/bin/env python3
"""
Ollama Chat Launcher
"""

import os
import sys
import subprocess
import argparse

def main():
    parser = argparse.ArgumentParser(description='Ollama Chat Launcher')
    parser.add_argument('--model', type=str, help='Model to use (skips selection)')
    parser.add_argument('--temp', type=float, default=0.7, help='Temperature (0-1)')
    parser.add_argument('--max-tokens', type=int, default=1024, help='Maximum tokens to generate')
    parser.add_argument('--api-url', type=str, help='Ollama API URL')
    parser.add_argument('--web', action='store_true', help='Launch web UI instead of terminal UI')
    parser.add_argument('--ruby', action='store_true', help='Use Ruby web UI (only with --web)')
    parser.add_argument('--gui', action='store_true', help='Launch graphical UI instead of terminal UI')
    parser.add_argument('--chatgpt', action='store_true', help='Launch ChatGPT-style UI')
    parser.add_argument('--pyqt', action='store_true', help='Launch PyQt-based UI with code spaces')

    args = parser.parse_args()

    # Determine script directory
    script_dir = os.path.dirname(os.path.abspath(__file__))

    if args.pyqt:
        # Launch PyQt-based UI
        pyqt_app_path = os.path.join(script_dir, 'gui_app', 'ollama_pyqt.py')
        print("Starting PyQt-based UI with code spaces...")

        # Build command
        cmd = [sys.executable, pyqt_app_path]
        if args.api_url:
            cmd.extend(['--api-url', args.api_url])

        # Make sure the app is executable
        os.chmod(pyqt_app_path, 0o755)

        # Run the app
        try:
            subprocess.run(cmd)
        except KeyboardInterrupt:
            print("\nExiting Ollama PyQt UI...")
        except Exception as e:
            print(f"Error: {str(e)}")
            sys.exit(1)
    elif args.chatgpt:
        # Launch ChatGPT-style UI
        chatgpt_app_path = os.path.join(script_dir, 'gui_app', 'chatgpt.py')
        print("Starting ChatGPT-style UI...")

        # Build command
        cmd = [sys.executable, chatgpt_app_path]
        if args.api_url:
            cmd.extend(['--api-url', args.api_url])

        # Make sure the app is executable
        os.chmod(chatgpt_app_path, 0o755)

        # Run the app
        try:
            subprocess.run(cmd)
        except KeyboardInterrupt:
            print("\nExiting Ollama ChatGPT-style UI...")
        except Exception as e:
            print(f"Error: {str(e)}")
            sys.exit(1)
    elif args.gui:
        # Launch GUI
        gui_app_path = os.path.join(script_dir, 'gui_app', 'ollama_gui.py')
        print("Starting GUI application...")

        # Build command
        cmd = [sys.executable, gui_app_path]
        if args.api_url:
            cmd.extend(['--api-url', args.api_url])

        # Make sure the GUI app is executable
        os.chmod(gui_app_path, 0o755)

        # Run the GUI app
        try:
            subprocess.run(cmd)
        except KeyboardInterrupt:
            print("\nExiting Ollama Chat GUI...")
        except Exception as e:
            print(f"Error: {str(e)}")
            sys.exit(1)
    elif args.web:
        # Launch web UI
        if args.ruby:
            # Launch Ruby web UI
            os.chdir(os.path.join(script_dir, 'ruby_app'))
            print("Starting Ruby web UI...")
            try:
                subprocess.run(['bundle', 'install'], check=True)
                subprocess.run(['ruby', 'app.rb'])
            except subprocess.CalledProcessError:
                print("Error: Failed to start Ruby web UI. Make sure Ruby and Bundler are installed.")
                sys.exit(1)
        else:
            # Launch Python web UI
            os.chdir(os.path.join(script_dir, 'python_app'))
            print("Starting Python web UI...")
            try:
                subprocess.run(['pip', 'install', '-r', 'requirements.txt'], check=True)
                subprocess.run(['python', 'app.py'])
            except subprocess.CalledProcessError:
                print("Error: Failed to start Python web UI. Make sure Python and pip are installed.")
                sys.exit(1)
    else:
        # Launch terminal UI
        terminal_app_path = os.path.join(script_dir, 'terminal_app', 'ollama_chat.py')

        # Build command
        cmd = [terminal_app_path]
        if args.model:
            cmd.extend(['--model', args.model])
        if args.temp:
            cmd.extend(['--temp', str(args.temp)])
        if args.max_tokens:
            cmd.extend(['--max-tokens', str(args.max_tokens)])
        if args.api_url:
            cmd.extend(['--api-url', args.api_url])

        # Make sure the terminal app is executable
        os.chmod(terminal_app_path, 0o755)

        # Run the terminal app
        try:
            subprocess.run(cmd)
        except KeyboardInterrupt:
            print("\nExiting Ollama Chat Terminal...")
        except Exception as e:
            print(f"Error: {str(e)}")
            sys.exit(1)

if __name__ == "__main__":
    main()